#summary Status of the R5RS Pitfalls Test Cases

= R^5^RS Pitfalls Test Results = 

|| *1.1* || *1.2* || *1.3* || *2.1* || *3.1* || *3.2* || *3.3* || *4.1* || *4.2* || *4.3* || *5.1* || *5.2* || *5.3* || *6.1* || *7.1* || *7.2* || *7.3* || *7.4* || *8.1* || *8.2* ||
|| *F* || *F* || *P* || *P* || _?_ || _?_ || _?_ || *P* || *P* || *P* || *P* || *P* || *P* || _?_ || *P* || *F* || _?_ || _?_ || _?_ || *P* ||

===Key===

  * *F*  -  Fail
  * *P*  -  Pass
  * _?_  -  Not tested

== Tests that Pass (10/20) ==

  * *1.3* 
{{{
>  ;; 1.3, Should be: #t
.. (letrec ((x (call-with-current-continuation
..              (lambda (c)
..                (list #T c)))))
..   (if (car x)
..       ((car (cdr x)) (list #F (lambda () x)))
..       (eq? x ((car (cdr x))))))
;Value: #t   
}}}
  * *2.1*
{{{
>  ;; 2.1, Should be: 1
.. (call-with-current-continuation
..  (lambda (c)
..    (0 (c 1))))
;Value: 1
}}}

== Tests that Fail (3/20) ==

The first two tests that fail deal with letrec.  Test 7.2 _should_ pass though - as it is the exact same test as 7.1, only in reverse order, and 7.2 fails because the JS stack overflows.  

== Tests that Haven't Been Tested (7/20) ==

For the most part, the tests that haven't been tested are those that require macros.  I would like to try to implement a macro system, but I will probably be too busy with school to actually think about starting this for a while.

See [http://sisc-scheme.org/r5rs_pitfall.php R5RS Pitfalls] ([http://sisc-scheme.org/r5rs_pitfall.scm source]).